{"version":3,"sources":["jquery.counterup.js"],"names":["$","fn","counterUp","options","s","settings","extend","time","delay","formatter","callback","this","each","$this","counter","data","counterUpper","nums","divisions","num","text","isComma","test","replace","decimalPlaces","split","length","isTime","times","m","parseInt","pop","i","newNum","parseFloat","toFixed","hours","minutes","seconds","toString","call","unshift","f","html","shift","setTimeout","waypoint","direction","destroy","offset","jQuery"],"mappings":"CAUA,SAAWA,GACT,YAEAA,GAAEC,GAAGC,UAAY,SAAUC,GAGzB,GAOIC,GAPAC,EAAWL,EAAEM,QACXC,KAAa,IACbC,MAAa,GACbC,WAAa,EACbC,SAAa,cAEZP,EAGP,OAAOH,GAAEW,MAAMC,KAAK,WAGlB,GAAIC,GAAUb,EAAEW,MACZG,GACEP,KAAOP,EAAEW,MAAMI,KAAK,mBAAqBV,EAASE,KAClDC,MAAOR,EAAEW,MAAMI,KAAK,oBAAsBV,EAASG,OAIrDQ,EAAe,WACjB,GAAIC,MACAC,EAAgBJ,EAAQP,KAAOO,EAAQN,MACvCW,EAAgBN,EAAMO,OACtBC,EAAgB,gBAAgBC,KAAKH,EACzCA,GAAoBA,EAAII,QAAQ,KAAM,GACtC,IAAIC,IAAiBL,EAAIM,MAAM,KAAK,QAAUC,OAE1CC,EAAS,uBAAuBL,KAAKH,EAGzC,IAAIQ,EAAQ,CACV,GAAIC,GAAQT,EAAIM,MAAM,KAClBI,EAAQ,CAEZ,KADAzB,EAAY,EACLwB,EAAMF,OAAS,GACpBtB,GAAKyB,EAAIC,SAASF,EAAMG,MAAO,IAC/BF,GAAK,GAOT,IAAK,GAAIG,GAAId,EAAWc,GAAK,EAAGA,IAAK,CAEnC,GAAIC,GAASC,WAAWf,EAAMD,EAAYc,GAAGG,QAAQX,EAGrD,IAAIG,EAAQ,CACVM,EAAcH,SAAS1B,EAAIc,EAAYc,EACvC,IAAII,GAAUN,SAASG,EAAS,MAAQ,GACpCI,EAAUP,SAASG,EAAS,IAAM,GAClCK,EAAUR,SAASG,EAAS,GAAI,GACpCA,IAAeG,EAAQ,GAAK,IAAMA,EAAQA,GAAS,KAAOC,EAAU,GAAK,IAAMA,EAAUA,GAAW,KAAOC,EAAU,GAAK,IAAMA,EAAUA,GAI5I,GAAIjB,EACF,KAAO,eAAeC,KAAKW,EAAOM,aAChCN,EAASA,EAAOM,WAAWhB,QAAQ,eAAgB,QAGnDlB,GAASI,YACXwB,EAAS5B,EAASI,UAAU+B,KAAK7B,KAAMsB,IAEzChB,EAAKwB,QAAQR,GAGfpB,EAAME,KAAK,iBAAkBE,GAC7BJ,EAAMO,KAAK,IAGX,IAAIsB,GAAI,WACN,MAAK7B,GAAME,KAAK,mBAIhBF,EAAM8B,KAAK9B,EAAME,KAAK,kBAAkB6B,cACpC/B,EAAME,KAAK,kBAAkBW,OAC/BmB,WAAWhC,EAAME,KAAK,kBAAmBD,EAAQN,QAEjDK,EAAME,KAAK,iBAAkB,MAC7BF,EAAME,KAAK,iBAAkB,MAC7BV,EAASK,SAAS8B,KAAK7B,aATvBN,GAASK,SAAS8B,KAAK7B,MAY3BE,GAAME,KAAK,iBAAkB2B,GAG7BG,WAAWhC,EAAME,KAAK,kBAAmBD,EAAQN,OAInDK,GAAMiC,SAAS,SAAUC,GACvB/B,IACAL,KAAKqC,YACHC,OAAQ,aAKfC","file":"jquery.counterup.min.js","sourcesContent":["/*!\n * jquery.counterup.js 2.1.0\n *\n * Copyright 2013, Benjamin Intal http://gambit.ph @bfintal\n * Released under the GPL v2 License\n *\n * Amended by Jeremy Paris, Ciro Mattia Gonano, Rodrigo Palomares and others\n *\n * Date: Jun 21, 2016\n */\n(function ($) {\n  \"use strict\";\n\n  $.fn.counterUp = function (options) {\n\n    // Defaults\n    var settings = $.extend({\n          'time':      400,\n          'delay':     10,\n          'formatter': false,\n          callback:    function () {\n          }\n        }, options),\n        s;\n\n    return $(this).each(function () {\n\n      // Store the object\n      var $this   = $(this),\n          counter = {\n            time:  $(this).data('counterup-time') || settings.time,\n            delay: $(this).data('counterup-delay') || settings.delay\n          };\n\n\n      var counterUpper = function () {\n        var nums          = [];\n        var divisions     = counter.time / counter.delay;\n        var num           = $this.text();\n        var isComma       = /[0-9]+,[0-9]+/.test(num);\n        num               = num.replace(/,/g, '');\n        var decimalPlaces = (num.split('.')[1] || []).length;\n\n        var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num);\n\n        // Convert time to total seconds\n        if (isTime) {\n          var times = num.split(':'),\n              m     = 1;\n          s         = 0;\n          while (times.length > 0) {\n            s += m * parseInt(times.pop(), 10);\n            m *= 60;\n          }\n        }\n\n        // test\n\n        // Generate list of incremental numbers to display\n        for (var i = divisions; i >= 1; i--) {\n\n          var newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces);\n\n          // Add incremental seconds and convert back to time\n          if (isTime) {\n            newNum      = parseInt(s / divisions * i);\n            var hours   = parseInt(newNum / 3600) % 24;\n            var minutes = parseInt(newNum / 60) % 60;\n            var seconds = parseInt(newNum % 60, 10);\n            newNum      = (hours < 10 ? \"0\" + hours : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n          }\n\n          // Preserve commas if input had commas\n          if (isComma) {\n            while (/(\\d+)(\\d{3})/.test(newNum.toString())) {\n              newNum = newNum.toString().replace(/(\\d+)(\\d{3})/, '$1' + ',' + '$2');\n            }\n          }\n          if (settings.formatter) {\n            newNum = settings.formatter.call(this, newNum);\n          }\n          nums.unshift(newNum);\n        }\n\n        $this.data('counterup-nums', nums);\n        $this.text('0');\n\n        // Updates the number until we're done\n        var f = function () {\n          if (!$this.data('counterup-nums')) {\n            settings.callback.call(this);\n            return;\n          }\n          $this.html($this.data('counterup-nums').shift());\n          if ($this.data('counterup-nums').length) {\n            setTimeout($this.data('counterup-func'), counter.delay);\n          } else {\n            $this.data('counterup-nums', null);\n            $this.data('counterup-func', null);\n            settings.callback.call(this);\n          }\n        };\n        $this.data('counterup-func', f);\n\n        // Start the count up\n        setTimeout($this.data('counterup-func'), counter.delay);\n      };\n\n      // Perform counts when the element gets into view\n      $this.waypoint(function (direction) {\n        counterUpper();\n        this.destroy(); //-- Waypoint 3.0 version of triggerOnce\n      }, {offset: '100%'});\n    });\n\n  };\n\n})(jQuery);\n"],"sourceRoot":"/source/"}